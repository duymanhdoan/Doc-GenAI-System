env:
  DOCKER_IMAGE_NAME: mydoc-ai-system
  DOCKER_REGISTRY: docker.io

name: Test, Build and Push Docker Image to DockerHub 

on:
  # Trigger manually from UI
  workflow_dispatch:
  # Trigger on push to specific branches
  push:
    branches:
      - 'dev/workflow'
      - 'main'
  # # Trigger on pull requests for testing
  # pull_request:
  #   branches:
  #     - 'main'

jobs: 
  # Test job - runs first
  test:
    name: Run Unit-Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      # - name: Install Dependencies Environment for Run Unit Tests
      #   run: |
      #     python -m pip install --upgrade pip
      #     # Install project in editable mode
      #     pip install -e .
          
      # - name: Execute All Unit tests
      #   id: run_tests
      #   run: |
      #     # Check if there are any test files before running pytest
      #     if find . -name "*test*.py" -o -name "test_*.py" | grep -q .; then
      #       echo "Found test files, running pytest..."
      #       pytest --cov=. --cov-report=xml
      #       echo "tests_run=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "No test files found, skipping tests"
      #       echo "tests_run=false" >> $GITHUB_OUTPUT
      #     fi
          
      # - name: Upload coverage reports
      #   if: steps.run_tests.outputs.tests_run == 'true'
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./coverage.xml
      #     fail_ci_if_error: false

  # Build and push job - runs after tests pass
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    # Only run on main branch or manual trigger, not on PRs
    if: github.event_name != 'pull_request'
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate version from git
        id: get_version
        run: |
          # Use git tag or commit SHA for versioning
          if git describe --tags --exact-match 2>/dev/null; then
            VERSION=$(git describe --tags --exact-match)
          else
            VERSION="sha-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: buid_and_push
        uses: docker/setup-buildx-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache,mode=max

      - name: Verify Images Tags 
        run: |     
          echo "tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }},${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest"

      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v2
      #   with:
      #     # âœ… Fixed: Use correct registry format
      #     subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true

  # Optional: Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    # needs: build-and-push
    if: github.event_name != 'pull_request'
    steps: 
      - run: echo "ðŸŽ‰ The last job Security Scan was finished!"
    # steps:
    #   - name: Run Trivy vulnerability scanner
    #     uses: aquasecurity/trivy-action@master
    #     with:
    #       image-ref: '${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest'
    #       format: 'sarif'
    #       output: 'trivy-results.sarif'

    #   - name: Upload Trivy scan results to GitHub Security tab
    #     uses: github  /codeql-action/upload-sarif@v2
    #     with:
    #       sarif_file: 'trivy-results.sarif'