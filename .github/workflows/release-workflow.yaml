env:
  DOCKER_IMAGE_NAME: mydoc-ai-system
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME_REPO: manhduyatsd

name: Test, Build and Push Docker Image to DockerHub 

on:
  # Trigger manually from UI
  workflow_dispatch:
  # Trigger on push to specific branches
  push:
    branches:
      - 'dev/argocd'
      # - 'dev/workflow'
      # - 'main'
  # # Trigger on pull requests for testing
  # pull_request:
  #   branches:
  #     - 'main'
  # Test job - runs first
jobs:
  check-version:
    name: Check Update New Version
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check.outputs.should_skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if pyproject.toml version changed
        id: check
        run: |
          if git rev-parse origin/dev/workflow^ >/dev/null 2>&1; then
            DIFF=$(git diff -U0 origin/dev/workflow^ -- pyproject.toml)
          else
            DIFF=$(git show HEAD:pyproject.toml)
          fi

          echo "DIFF=$DIFF"

          if echo "$DIFF" | grep -E '^+\s*version\s*=' >/dev/null; then
            NEW_VERSION=$(echo "$DIFF" | grep -E '^+\s*version\s*=')
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version detected: $NEW_VERSION"
          else
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "No version change found, Skip all remaining jobs."
          fi

  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: check-version
    if: github.event_name != 'pull_request' && needs.check-version.outputs.should_skip != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Dependencies Environment for Run Unit Tests
        run: |
          python -m pip install --upgrade pip
          # Install project in editable mode
          pip install -e .
          
      - name: Execute All Unit tests
        id: run_tests
        run: |
          # Check if there are any test files before running pytest
          if find . -name "*test*.py" -o -name "test_*.py" | grep -q .; then
            echo "Found test files, running pytest..."
            pytest --cov=. --cov-report=xml
            echo "tests_run=true" >> $GITHUB_OUTPUT
          else
            echo "No test files found, skipping tests"
            echo "tests_run=false" >> $GITHUB_OUTPUT
          fi     

      - name: Upload report as artifacts to Codecov
        if: steps.run_tests.outputs.tests_run == 'true'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          fail_ci_if_error: false





  # Build and push job - runs after tests pass
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: unit-test  # Only run if tests pass
    # Only run on main branch or manual trigger, not on PRs
    if: github.event_name != 'pull_request'
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=^version = ")[^"]+' pyproject.toml)
          echo "VERSION=$VERSION"
          echo "VERSION_TAG=v$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}" >> $GITHUB_OUTPUT
          
      # - name: Login to DockerHub
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.DOCKER_REGISTRY }}
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
            
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
            
      # - name: Build & push Docker Image to DockerHub
      #   id: buid_and_push
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: |
      #       ${{ env.DOCKER_USERNAME_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:${{env.VERSION_TAG }}

      # - name: Print Images Name
      #   run: |     
      #     echo "tags: ${{ env.DOCKER_USERNAME_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:${{env.VERSION_TAG }}"


  update-helm-values:
    name: Update Helm Values
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      CHART_FILE: helm-charts/fraud-detection/Chart.yaml
      VALUE_FILE: helm-charts/fraud-detection/values.yaml
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: "${{ github.head_ref || github.ref_name }}"
          fetch-depth: 0 # important for PR creation

      - name: Set up Git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Update Chart.yaml & values.yaml with version
        run: |
          VERSION="${{ env.VERSION_TAG  }}"
          IMAGE="${{ env.DOCKER_USERNAME_REPO }}/${{ env.DOCKER_IMAGE_NAME }}"

          yq eval ".version = \"${VERSION#v}\" |
                   .appVersion = \"${VERSION#v}\"" \
                   -i "$CHART_FILE"

          yq eval ".image.repository = \"$IMAGE\" |
                   .image.tag = \"$VERSION\"" \
                   -i "$VALUE_FILE"

          echo "$IMAGE:$VERSION"
        # git add "$CHART_FILE" "$VALUE_FILE"
        # git commit -m "ci: update Helm values.yaml and Chart.yaml to $IMAGE:$VERSION"
        # git push --set-upstream origin dev/argocd

  # git push origin HEAD
  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.event_name != 'pull_request'
  #   steps:
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: '${{ env.DOCKER_USERNAME_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github  /codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: 'trivy-results.sarif'